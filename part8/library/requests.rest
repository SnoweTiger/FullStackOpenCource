### Get counts
POST http://localhost:4000/
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

query Counts {
  authorCount
  bookCount
}

###
POST http://localhost:4000/
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

query AllBooks {
    allBooks
    {
        title
        author {
            name
            id
            born
        }
        published
        id
        genres
    }
}

###
POST http://localhost:4000/
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

query allAuthors {
  allAuthors
  {
    name
    id
    born
    books {
      title
    }
    bookCount
  }
}


### Create user
POST http://localhost:4000/
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  createUser (
    username: "mluukkai"
    favoriteGenre: "Comedy"
  ) {
    username
    id
  }
}

### Login
# @name login
POST http://localhost:4000/
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login (
    username: "mluukkai"
    password: "secret"
  ) {
    value
  }
}

### Me
@token = {{login.response.body.data.login.value}}
POST http://localhost:4000/
Content-Type: application/json
Authorization: Bearer {{token}}
X-REQUEST-TYPE: GraphQL

query {
  me {
    username
    favoriteGenre
    id
  }
}

### Add author
POST http://localhost:4000/
Content-Type: application/json
X-REQUEST-TYPE: GraphQL
Authorization: Bearer {{token}}

mutation AddAuthor {
  addAuthor(
    name: "Gosha",
    born: 1000
  ) {
    id
    name
    born
    bookCount
  }
}

### Add book
POST http://localhost:4000/
Content-Type: application/json
X-REQUEST-TYPE: GraphQL
Authorization: Bearer {{token}}

mutation AddBook {
  addBook(
    title: "Test Book12",
    author: "Gosha",
    published: 2000,
    genres: [
      "Drama"
    ]
  ) {
    title
    published
    id
    author {
      name
      id
    }
  }
}